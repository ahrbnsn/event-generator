const randomId = () => crypto.randomUUID();

export const eventDescriptions = {
  eventTypes: [
    "POST",
    "click",
    "CLS",
    "INP",
    "HTTP GET",
    "resourceFetch",
    "GET",
    "FID",
    "input",
    "LCP",
    "web-vitals",
    "documentLoad",
    "documentFetch",
  ],
  eventTypeCount: {
    POST: 143,
    click: 50,
    CLS: 1,
    INP: 1,
    "HTTP GET": 5,
    resourceFetch: 43,
    GET: 1,
    FID: 1,
    input: 2,
    LCP: 1,
    "web-vitals": 1,
    documentLoad: 1,
    documentFetch: 1,
  },
  globalFields: {
    "browser.hash": { values: [""] },
    "browser.height": { min: 500, max: 3600 },
    "browser.isMobile": { values: [true, false] },
    "browser.language": { values: ["en-GB", "en-US"] },
    "browser.route": {
      values: [
        "/getting-data-in/opentelemetry/dotnet-distro/",
        "/getting-data-in/start-today/",
        "/lost-in-the-woods",
        "/at-the-witches-house",
        "/out-of-the-frying-pan",
        "/under-the-bridge",
        "/paying-the-toll",
      ],
    },
    "browser.screenSize": { values: ["large"] },
    "browser.url": {
      values: [
        "https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/",
      ],
    },
    "browser.width": { min: 2560, max: 2560 },
    duration_ms: { min: 5, max: 4873.1001 },
    "library.name": {
      values: [
        "@opentelemetry/instrumentation-xml-http-request",
        "@opentelemetry/instrumentation-user-interaction",
        "web-vitals-instrumentation",
        "@opentelemetry/instrumentation-fetch",
        "@opentelemetry/instrumentation-document-load",
      ],
    },
    "meta.signal_type": { values: ["trace"] },
    "service.name": { values: ["mock-events"] },
    "session.id": { generator: randomId },
    "span.kind": { values: ["client", "internal"] },
    "span.num_events": { min: 0, max: 12 },
    "span.num_links": { min: 0, max: 0 },
    status_code: { min: 0, max: 0 },
    "telemetry.sdk.language": { values: ["webjs"] },
    "telemetry.sdk.name": { values: ["opentelemetry"] },
    "telemetry.sdk.version": { values: ["1.14.0"] },
    "trace.span_id": { generator: randomId },
    "trace.trace_id": { generator: randomId },
    type: { values: ["client", "internal"] },
    "user_agent.original": {
      values: [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
      ],
    },
  },
  perEventFields: {
    POST: {
      "http.host": {
        values: [
          "rs.fullstory.com",
          "api.company-target.com",
          "stats.g.doubleclick.net",
          "api.amplitude.com",
          "www.google-analytics.com",
        ],
      },
      "http.method": { values: ["POST"] },
      "http.path": { values: ["rec/bundle/v2", "rec/page", "j/collect"] },
      "http.response_content_length": { min: 0, max: 0 },
      "http.scheme": { values: ["https"] },
      "http.status_code": { min: 200, max: 401 },
      "http.status_text": { values: [""] },
      "http.user_agent": {
        values: [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        ],
      },
      "library.version": { values: ["0.40.0"] },
      "telemetry.instrumentation_library": { values: [true] },
    },
    click: {
      "element.className": {
        values: [
          "s",
          "docs-inner-container",
          "chroma",
          "submenu-toggle-checkbox",
          "submenu-toggle-click-target",
        ],
      },
      "element.id": {
        values: ["", "Send Data to Honeycomb", "Traces with OpenTelemetry"],
      },
      "element.innerHTML": {
        values: [
          '"https://api.honeycomb.io/v1/traces"',
          '\n  \n\n      <div class="docs-content">\n      \n      \n        <ol class="breadcrumb-bar">\n  \n    <li>\n      <a href="https://docs.honeycomb.io/">Docs</a>\n    </li>\n  \n  \n    <li>\n      <a href="https://docs.honeycomb.io/getting-data-in/">Send Data to Honeycomb</a>\n    </li>\n  \n  \n    <li class="active">\n      <a href="https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/">OpenTelemetry for .NET</a>\n    </li>\n  \n</ol>\n\n\n      \n\n      <h1 class="page-title">\n      OpenTelemetry for .NET\n      \n      \n      </h1>\n      \n      <div id="container-toggle-toc">\n        <button id="button-toggle-toc"><img id="menu-icon-toc" src="/icons/menu.svg" alt="open table of contents">Table of Contents</button>\n      </div>\n      \n       \n   <p>Honeycomb has a <a href="https://github.com/honeycombio/honeycomb-opentelemetry-dotnet">OpenTelemetry Distribution for .NET</a> that wraps the official OpenTelemetry .NET SDK to simplify the setup process and add instrumentation your applications to send telemetry data to Honeycomb.</p>\n<h2 id="requirements">Requirements&nbsp;<a class="headline-hash" arialabel="Anchor" href="#requirements"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>These instructions explain how to instrument a service written in .NET.\nIn order to follow along, you will need:</p>\n<ul>\n<li>A .NET application that conforms to <a href="https://docs.microsoft.com/en-us/dotnet/standard/net-standard">NET Standard</a> 2.0, or a .NET Framework 4.6.2+ application.</li>\n<li>A Honeycomb API Key.</li>\n</ul>\n<p>You can <a href="/working-with-your-data/settings/api-keys/#find-api-keys">find your API key</a> in your Environment Settings.\nIf you do not have an API key yet, sign up for a <a href="https://ui.honeycomb.io/signup">free Honeycomb account</a>.</p>\n<h2 id="examples">Examples&nbsp;<a class="headline-hash" arialabel="Anchor" href="#examples"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>There are <a href="https://github.com/honeycombio/honeycomb-opentelemetry-dotnet/tree/main/examples">several examples</a> that configure applications to send OpenTelemetry data to Honeycomb.</p>\n<h2 id="automatic-instrumentation">Automatic Instrumentation&nbsp;<a class="headline-hash" arialabel="Anchor" href="#automatic-instrumentation"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<h3 id="acquire-dependencies">Acquire Dependencies&nbsp;<a class="headline-hash" arialabel="Anchor" href="#acquire-dependencies"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>Install the <a href="https://www.nuget.org/packages/Honeycomb.OpenTelemetry">Honeycomb.OpenTelemetry NuGet package</a>.</p>\n<p>For example, with the .NET CLI, use:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dotnet add package Honeycomb.OpenTelemetry\n</span></span><span class="line"><span class="cl">dotnet add package OpenTelemetry.Extensions.Hosting\n</span></span><span class="line"><span class="cl">dotnet add package Honeycomb.OpenTelemetry.CommonInstrumentations --prerelease\n</span></span></code></pre></div><h3 id="initialize">Initialize&nbsp;<a class="headline-hash" arialabel="Anchor" href="#initialize"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>Configure your app for Honeycomb OpenTelemetry Distribution for .NET with one of the following configuration methods:</p>\n<div id="quickstart-nav" class="code-toggle-nav prose">\n<a class="active" href="#">ASP.NET Core</a>\n<a class="hidden" href="#">programmatically</a>\n<a class="hidden" href="#">ASP.NET (.NET Framework)</a>\n</div>\n<div id="quickstart-content" class="code-toggle-content prose">\n\n<div id="quickstart-ASP.NET Core" class="active">\n<p>Initialize your <code>ASP.NET</code> Core app to use the Honeycomb OpenTelemetry Distribution for .NET:</p>\n<ol>\n<li>\n<p>In your <code>appsettings.json</code> file, add a Honeycomb section:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ServiceName"</span><span class="p">:</span> <span class="s2">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ApiKey"</span><span class="p">:</span> <span class="s2">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div><p>By default, the data you send will be stored in our US data location (<code>https://api.honeycomb.io:443</code>). If you would like to store your data in our EU location, configure the <code>Endpoint</code> as well:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"Endpoint"</span><span class="p">:</span> <span class="s2">"https://api.eu1.honeycomb.io:443"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ServiceName"</span><span class="p">:</span> <span class="s2">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ApiKey"</span><span class="p">:</span> <span class="s2">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div></li>\n<li>\n<p>Get <code>HoneycombOptions</code> from configuration and use these options to configure the OpenTelemetry SDK in your application startup code:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="n">WebApplication</span><span class="p">.</span><span class="n">CreateBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>\n</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddControllers</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">honeycombOptions</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">GetHoneycombOptions</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">// Set up OpenTelemetry Tracing</span>\n</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">otelBuilder</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="n">otelBuilder</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="n">honeycombOptions</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddCommonInstrumentations</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl"><span class="p">});</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">// Register a Tracer, so it can be injected into other components (for example, Controllers)</span>\n</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">(</span><span class="n">TracerProvider</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">GetTracer</span><span class="p">(</span><span class="n">honeycombOptions</span><span class="p">.</span><span class="n">ServiceName</span><span class="p">));</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">app</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="n">app</span><span class="p">.</span><span class="n">MapGet</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="p">(</span><span class="n">Tracer</span> <span class="n">tracer</span><span class="p">)</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="nn">var</span> <span class="n">span</span> <span class="p">=</span> <span class="n">tracer</span><span class="p">.</span><span class="n">StartActiveSpan</span><span class="p">(</span><span class="s">"app.manual-span"</span><span class="p">);</span>\n</span></span><span class="line"><span class="cl">    <span class="n">span</span><span class="p">.</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">"app.manual-span.message"</span><span class="p">,</span> <span class="s">"Adding custom spans is also super easy!"</span><span class="p">);</span>\n</span></span><span class="line"><span class="cl"><span class="p">});</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="k">await</span> <span class="n">app</span><span class="p">.</span><span class="n">RunAsync</span><span class="p">();</span>\n</span></span></code></pre></div></li>\n</ol>\n<div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content"><p>If you are a <a href="/honeycomb-classic/">Honeycomb Classic</a> user, you must also specify the Dataset using the <code>Dataset</code> field in the <code>appsettings.json</code> file.\nA <strong>Dataset</strong> is a bucket where data gets stored in Honeycomb.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ServiceName"</span><span class="p">:</span> <span class="s2">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"ApiKey"</span><span class="p">:</span> <span class="s2">"{apikey}"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"Dataset"</span><span class="p">:</span> <span class="s2">"{dataset}"</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div></div>\n    </div>\n  </div>\n\n</div>\n\n\n<div id="quickstart-programmatically">\n<p>To programmatically configure the OpenTelemetry SDK, provide a <code>HoneycombOptions</code> object:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">Honeycomb.OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="n">Endpoint</span> <span class="p">=</span> <span class="s">"https://api.honeycomb.io:443"</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">    <span class="c1">//Endpoint = "https://api.eu1.honeycomb.io:443" // EU instance</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ServiceVersion</span> <span class="p">=</span> <span class="s">"1.0.0"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ResourceBuilder</span> <span class="p">=</span> <span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">().</span><span class="n">AddAttributes</span><span class="p">(</span>\n</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span>\n</span></span><span class="line"><span class="cl">        <span class="p">{</span>\n</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="s">"custom-resource-attribute"</span><span class="p">,</span> <span class="s">"some-value"</span><span class="p">}</span>\n</span></span><span class="line"><span class="cl">        <span class="p">})</span>\n</span></span><span class="line"><span class="cl"><span class="p">};</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">var</span> <span class="n">tracerProvider</span> <span class="p">=</span> <span class="n">Sdk</span><span class="p">.</span><span class="n">CreateTracerProviderBuilder</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span></code></pre></div><div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content"><p>If you are a <a href="/honeycomb-classic/">Honeycomb Classic</a> user, you must also specify the Dataset using the <code>Dataset</code> field in the <code>HoneycombOptions</code> object.\nA <strong>Dataset</strong> is a bucket where data gets stored in Honeycomb.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">var</span> <span class="n">tracerProvider</span> <span class="p">=</span> <span class="n">Sdk</span><span class="p">.</span><span class="n">CreateTracerProviderBuilder</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">Endpoint</span> <span class="p">=</span> <span class="s">"https://api.honeycomb.io:443"</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">//Endpoint = "https://api.eu1.honeycomb.io:443" // EU instance</span>\n</span></span><span class="line"><span class="cl">        <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">        <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">        <span class="n">Dataset</span> <span class="p">=</span> <span class="s">"{dataset}"</span>\n</span></span><span class="line"><span class="cl">    <span class="p">})</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span></code></pre></div></div>\n    </div>\n  </div>\n\n</div>\n\n\n<div id="quickstart-ASP.NET (.NET Framework)">\n<p>Add the following to your <code>Web.config</code>:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;system.webServer&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">&lt;modules&gt;</span>\n</span></span><span class="line"><span class="cl">        <span class="nt">&lt;add</span>\n</span></span><span class="line"><span class="cl">            <span class="na">name=</span><span class="s">"TelemetryHttpModule"</span>\n</span></span><span class="line"><span class="cl">            <span class="na">type=</span><span class="s">"OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule,\n</span></span></span><span class="line"><span class="cl"><span class="s">                OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule"</span>\n</span></span><span class="line"><span class="cl">            <span class="na">preCondition=</span><span class="s">"integratedMode,managedHandler"</span> <span class="nt">/&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/modules&gt;</span>\n</span></span><span class="line"><span class="cl"><span class="nt">&lt;/system.webServer&gt;</span>\n</span></span></code></pre></div><p>Configure the OpenTelemetry SDK to use Honeycomb during application start:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">Honeycomb.OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="k">class</span> <span class="nc">WebApiApplication</span> <span class="p">:</span> <span class="n">HttpApplication</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="n">TracerProvider</span> <span class="n">_tracerProvider</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="k">void</span> <span class="n">Application_Start</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">_tracerProvider</span> <span class="p">=</span> <span class="n">Sdk</span><span class="p">.</span><span class="n">CreateTracerProviderBuilder</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl">            <span class="p">{</span>\n</span></span><span class="line"><span class="cl">                <span class="n">Endpoint</span> <span class="p">=</span> <span class="s">"https://api.honeycomb.io:443"</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">                <span class="c1">//Endpoint = "https://api.eu1.honeycomb.io:443" // EU instance</span>\n</span></span><span class="line"><span class="cl">                <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">                <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">            <span class="p">})</span>\n</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl">    <span class="kd">protected</span> <span class="k">void</span> <span class="n">Application_End</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">_tracerProvider</span><span class="p">?.</span><span class="n">Dispose</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div><p>For more advanced configuration options, see the <a href="https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/src/OpenTelemetry.Exporter.Prometheus.AspNetCore">OpenTelemetry ASP.NET instrumentation</a>.</p>\n<div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content"><p>If you are a <a href="/honeycomb-classic/">Honeycomb Classic</a> user, you must also specify the Dataset using the <code>Dataset</code> field in the <code>HoneycombOptions</code> object.\nA <strong>Dataset</strong> is a bucket where data gets stored in Honeycomb.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">_tracerProvider</span> <span class="p">=</span> <span class="n">Sdk</span><span class="p">.</span><span class="n">CreateTracerProviderBuilder</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">        <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">        <span class="n">Dataset</span> <span class="p">=</span> <span class="s">"{dataset}"</span>\n</span></span><span class="line"><span class="cl">    <span class="p">})</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span></code></pre></div></div>\n    </div>\n  </div>\n\n</div>\n\n\n</div>\n\n<h2 id="using-httpprotobuf-instead-of-grpc">Using HTTP/protobuf instead of gRPC&nbsp;<a class="headline-hash" arialabel="Anchor" href="#using-httpprotobuf-instead-of-grpc"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>By default, the OpenTelemetry .NET SDK uses the gRPC protocol to send telemetry data.\nTo use HTTP instead of gRPC for traces, update the protocol in the <code>OtlpExporter</code>:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">builder</span> <span class="p">=&gt;</span> <span class="n">builder</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetResourceBuilder</span><span class="p">(</span><span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">().</span><span class="n">AddService</span><span class="p">(</span><span class="n">serviceName</span><span class="p">))</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddAspNetCoreInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHttpClientInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddOtlpExporter</span><span class="p">(</span><span class="n">option</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"https://api.honeycomb.io/v1/traces"</span><span class="p">);</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">//option.Endpoint = new Uri("https://api.eu1.honeycomb.io/v1/traces"); // EU instance</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Headers</span> <span class="p">=</span> <span class="s">$"x-honeycomb-team={honeycombApiKey}"</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Protocol</span> <span class="p">=</span> <span class="n">OtlpExportProtocol</span><span class="p">.</span><span class="n">HttpProtobuf</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}));</span>\n</span></span></code></pre></div><p>Note that the endpoint URL is different for HTTP/protobuf than for gRPC in that it specifies the signal type (<code>/v1/traces</code>).</p>\n<p>If the application is running on .NET Core 3.x, also add the following at application startup:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">AppContext</span><span class="p">.</span><span class="n">SetSwitch</span><span class="p">(</span><span class="s">"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>\n</span></span></code></pre></div><div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content"><p>Endpoint configuration options, as well as OpenTelemetry Headers, are listed in the OpenTelemetry for .NET chart if sending data to Honeycomb directly.</p>\n<p>If using an <a href="/getting-data-in/otel-collector/">OpenTelemetry Collector</a>, specify the endpoint of the collector, and add the headers to the collector configuration file.</p>\n</div>\n    </div>\n  </div>\n<h2 id="using-instrumentation-packages">Using Instrumentation Packages&nbsp;<a class="headline-hash" arialabel="Anchor" href="#using-instrumentation-packages"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>By default, the Honeycomb Distribution does not bundle any instrumentation packages.\nHowever, two additional packages exist to make getting started easier:</p>\n<ul>\n<li>Honeycomb.OpenTelemetry.Instrumentation.AspNetCore</li>\n<li>Honeycomb.OpenTelemetry.CommonInstrumentations</li>\n</ul>\n<p>The <code>Honeycomb.OpenTelemetry.Instrumentation.AspNetCore</code> package wraps the existing ASP.NET Core instrumentation package published by OpenTelemetry, but also copies the current trace baggage into spans created on incoming requests.\nIf you’d prefer not to have this behavior, you can use the OpenTelemetry AspNetCore instrumentation package directly.</p>\n<p>To use <code>Honeycomb.OpenTelemetry.Instrumentation.AspNetCore</code>, first add the package:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dotnet add package Honeycomb.OpenTelemetry.Instrumentation.AspNetCore --prerelease\n</span></span></code></pre></div><p>Then, configure the OpenTelemetry SDK to add ASP.NET Core instrumentation during application start:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">honeycombOptions</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">GetHoneycombOptions</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">otelBuilder</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="n">otelBuilder</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="n">honeycombOptions</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddAspNetCoreInstrumentationWithBaggage</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl"><span class="p">);</span>\n</span></span></code></pre></div><p>The <code>Honeycomb.OpenTelemetry.CommonInstrumentations</code> package bundles several common instrumentation libraries:</p>\n<p>For .NET 6 and above:</p>\n<ul>\n<li>Honeycomb.OpenTelemetry.Instrumentation.AspNetCore</li>\n<li>OpenTelemetry.Instrumentation.GrpcNetClient</li>\n</ul>\n<p>For .NET Framework 4.6.2 and above:</p>\n<ul>\n<li>OpenTelemetry.Instrumentation.Owin</li>\n<li>OpenTelemetry.Instrumentation.AspNet</li>\n</ul>\n<p>For .NET or .NET Framework 4.7.1 and above:</p>\n<ul>\n<li>OpenTelemetry.Instrumentation.Quartz</li>\n</ul>\n<p>And for all .NET flavors and versions:</p>\n<ul>\n<li>Npgsql.OpenTelemetry</li>\n<li>OpenTelemetry.Instrumentation.EntityFrameworkCore</li>\n<li>OpenTelemetry.Instrumentation.Http</li>\n<li>OpenTelemetry.Instrumentation.MySqlData</li>\n<li>OpenTelemetry.Instrumentation.SqlClient</li>\n<li>OpenTelemetry.Instrumentation.StackExchangeRedis</li>\n<li>OpenTelemetry.Instrumentation.Wcf</li>\n</ul>\n<p>To use the CommonInstrumentations package, first add the package:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dotnet add package Honeycomb.OpenTelemetry.CommonInstrumentations --prerelease\n</span></span></code></pre></div><p>Then, configure the OpenTelemetry SDK to add instrumentation during application start:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">honeycombOptions</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="n">Configuration</span><span class="p">.</span><span class="n">GetHoneycombOptions</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">otelBuilder</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="n">otelBuilder</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">(</span><span class="n">honeycombOptions</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddCommonInstrumentations</span><span class="p">();</span>\n</span></span><span class="line"><span class="cl"><span class="p">);</span>\n</span></span></code></pre></div><p>Additional instrumentation packages can be added during initialization.\nFor example, to add the <a href="https://www.nuget.org/packages/OpenTelemetry.Instrumentation.AWSLambda/">AWS Lambda Instrumentation package</a> from OpenTelemetry-Contrib, install the package:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dotnet add package OpenTelemetry.Instrumentation.AWSLambda --prerelease\n</span></span></code></pre></div><p>Then, configure the OpenTelemetry SDK to add AWS instrumentation during application start:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">//...</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">var</span> <span class="n">tracerProvider</span> <span class="p">=</span> <span class="n">Sdk</span><span class="p">.</span><span class="n">CreateTracerProviderBuilder</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHoneycomb</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddAWSLambdaConfigurations</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>\n</span></span></code></pre></div><div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content">Redis instrumentation requires access to the <code>IConnection</code> object to setup tracing.\nThis can either be provided as part of the <code>AddHoneycomb</code> call by setting the RedisConnection property on HoneycombOptions or it can be automatically retrieved if it is registered in the ASP.NET ServiceCollection object.</div>\n    </div>\n  </div>\n<h2 id="adding-manual-instrumentation">Adding Manual Instrumentation&nbsp;<a class="headline-hash" arialabel="Anchor" href="#adding-manual-instrumentation"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<h3 id="acquiring-a-tracer">Acquiring a Tracer&nbsp;<a class="headline-hash" arialabel="Anchor" href="#acquiring-a-tracer"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>To create spans, you need to acquire a <code>Tracer</code>.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">//...</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">tracer</span> <span class="p">=</span> <span class="n">TracerProvider</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">GetTracer</span><span class="p">(</span><span class="s">"tracer.name.here"</span><span class="p">);</span>\n</span></span></code></pre></div><p>Then, inject the <code>Tracer</code> instance with ASP.NET Core dependency injection or manage its lifecycle manually.</p>\n<p>When you create a <code>Tracer</code>, OpenTelemetry requires you to give it a name as a string.\nThis string is the only required parameter.</p>\n<p>When traces are sent to Honeycomb, the name of the <code>Tracer</code> is turned into the <code>library.name</code> field, which can be used to show all spans created from a particular tracer.</p>\n<p>In general, pick a name that matches the appropriate scope for your traces.\nIf you have one tracer for each service, then use the service name.\nIf you have multiple tracers that live in different “layers” of your application, then use the name that corresponds to that “layer”.</p>\n<p>The <code>library.name</code> field is also used with traces created from instrumentation libraries.</p>\n<h3 id="adding-attributes-to-spans">Adding Attributes to Spans&nbsp;<a class="headline-hash" arialabel="Anchor" href="#adding-attributes-to-spans"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>It is often beneficial to add attributes to a currently executing span in a trace.\nFor example, you may have an application or service that handles users and you want to associate the user with the span when querying your dataset in Honeycomb.\nIn order to do this, get the current span from the context and set an attribute with the user ID:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">//...</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">currentSpan</span> <span class="p">=</span> <span class="n">Tracer</span><span class="p">.</span><span class="n">CurrentSpan</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl"><span class="n">currentSpan</span><span class="p">.</span><span class="n">SetAttribute</span><span class="p">(</span><span class="s">"user.id"</span><span class="p">,</span> <span class="n">User</span><span class="p">.</span><span class="n">GetUserId</span><span class="p">())</span>\n</span></span></code></pre></div><p>This configuration will add a <code>user.id</code> attribute to the current span, so that you can use the field in <code>WHERE</code>, <code>GROUP BY</code>, or <code>ORDER</code> clauses in the Honeycomb query builder.</p>\n<h3 id="creating-new-spans">Creating New Spans&nbsp;<a class="headline-hash" arialabel="Anchor" href="#creating-new-spans"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>In order to get the full picture of what is happening, you will have to add manual instrumentation and create custom spans to describe what is happening in your application.\nTo do this, grab your tracer instance and use it to create a span:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry.Trace</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="c1">//...</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">var</span> <span class="n">span</span> <span class="p">=</span> <span class="n">TracerProvider</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">GetTracer</span><span class="p">(</span><span class="s">"my-service"</span><span class="p">).</span><span class="n">StartActiveSpan</span><span class="p">(</span><span class="s">"expensive-query"</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl"><span class="c1">// ... do cool stuff</span>\n</span></span></code></pre></div><h3 id="multi-span-attributes">Multi-Span Attributes&nbsp;<a class="headline-hash" arialabel="Anchor" href="#multi-span-attributes"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>Sometimes you want to add the same attribute to many spans within the same trace.\nThese attributes may include variables calculated during your program, or other useful values for correlation or debugging purposes.</p>\n<p>We will leverage the OpenTelemetry concept of <a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md#baggage-signal">baggage</a> to add this attribute.\nBaggage allows you to add a <code>key</code> with a <code>value</code> as an attribute to every subsequent child span of the current application context.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">OpenTelemetry</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="p">...</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl"><span class="n">Baggage</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">SetBaggage</span><span class="p">(</span><span class="s">"app.username"</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>\n</span></span></code></pre></div><p><strong>Note:</strong> Any Baggage attributes that you set in your application will be attached to outgoing network requests as a header. If your service communicates to a third party API, do <strong>NOT</strong> put sensitive information in the Baggage attributes.</p>\n<h3 id="more-on-manual-instrumentation">More on Manual Instrumentation&nbsp;<a class="headline-hash" arialabel="Anchor" href="#more-on-manual-instrumentation"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>The <a href="https://opentelemetry.io/docs/languages/net/">OpenTelemetry documentation for .NET</a> has a comprehensive set of topics on manual instrumentation, both with the <a href="https://opentelemetry.io/docs/languages/net/manual/"><code>System.Diagnostics</code> API</a> and the <a href="https://opentelemetry.io/docs/languages/net/shim/">OpenTelemetry Shim</a>.</p>\n<h2 id="sending-data-to-a-collector-or-other-endpoint">Sending Data to a Collector or Other Endpoint&nbsp;<a class="headline-hash" arialabel="Anchor" href="#sending-data-to-a-collector-or-other-endpoint"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>You can send data to an <a href="/getting-data-in/otel-collector/">OpenTelemetry Collector instance</a> or another endpoint by specifying a different endpoint.</p>\n<p>For example, here is how to send to an OpenTelemetry Collector instance over HTTP:</p>\n<div id="senddata-nav" class="code-toggle-nav prose">\n<a class="active" href="#">Code</a>\n<a class="hidden" href="#">AppSettings</a>\n</div>\n<div id="senddata-content" class="code-toggle-content prose">\n<div id="senddata-Code" class="active">\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">    <span class="n">TracesEndpoint</span> <span class="p">=</span> <span class="s">"http://&lt;your-collector-endpoint&gt;/v1/traces"</span>\n</span></span><span class="line"><span class="cl">\n</span></span><span class="line"><span class="cl">    <span class="c1">// MetricsEndpoint is not required if you are not sending metrics</span>\n</span></span><span class="line"><span class="cl">    <span class="n">MetricsEndpoint</span> <span class="p">=</span> <span class="s">"http://&lt;your-collector-endpoint&gt;/v1/metrics"</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div>\n</div>\n\n\n<div id="senddata-AppSettings">\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"TracesEndpoint"</span><span class="p">:</span> <span class="s2">"http://&lt;your-collector-endpoint&gt;/v1/traces"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"MetricsEndpoint"</span><span class="p">:</span> <span class="s2">"http://&lt;your-collector-endpoint&gt;/v1/metrics"</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div>\n</div>\n\n\n</div>\n\n<h2 id="sampling">Sampling&nbsp;<a class="headline-hash" arialabel="Anchor" href="#sampling"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>Deterministic sampling can be enabled by providing a <code>SampleRate</code> via the following methods.\nA sample rate of <code>5</code> means that one out of every five traces will be sent to Honeycomb.</p>\n<div id="sampling-nav" class="code-toggle-nav prose">\n<a class="active" href="#">Code</a>\n<a class="hidden" href="#">AppSettings</a>\n</div>\n<div id="sampling-content" class="code-toggle-content prose">\n<div id="sampling-Code" class="active">\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="kt">var</span> <span class="n">options</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HoneycombOptions</span>\n</span></span><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ServiceName</span> <span class="p">=</span> <span class="s">"my-app"</span><span class="p">,</span>\n</span></span><span class="line"><span class="cl">    <span class="n">ApiKey</span> <span class="p">=</span> <span class="s">"{apikey}"</span>\n</span></span><span class="line"><span class="cl">    <span class="n">SampleRate</span> <span class="p">=</span> <span class="m">5</span> <span class="c1">// sends 1/5 traces</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div><p>The value of <code>SampleRate</code> <strong>must</strong> be a positive integer.</p>\n\n</div>\n\n\n<div id="sampling-AppSettings">\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"SampleRate"</span><span class="p">:</span> <span class="mi">5</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div><p>The value of <code>SampleRate</code> <strong>must</strong> be a positive integer.</p>\n\n</div>\n\n\n</div>\n\n<p>If you have multiple services that communicate with each other, it is important that they have the same sampling configuration.\nOtherwise, each service might make a different sampling decision, resulting in incomplete or broken traces.\nYou can sample using a standalone proxy as an alternative, like <a href="/manage-data-volume/refinery/">Honeycomb Refinery</a>, or when you have more robust sampling needs.</p>\n<h2 id="distributed-trace-propagation">Distributed Trace Propagation&nbsp;<a class="headline-hash" arialabel="Anchor" href="#distributed-trace-propagation"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>When a service calls another service, you want to ensure that the relevant trace information is propagated from one service to the other.\nThis allows Honeycomb to connect the two services in a trace.</p>\n<p>Distributed tracing enables you to trace and visualize interactions between multiple instrumented services.\nFor example, your users may interact with a front-end API service, which talks to two internal APIs to fulfill their request.\nIn order to have traces connect spans for all these services, it is necessary to propagate trace context between these services, usually by using an HTTP header.</p>\n<p>Both the sending and receiving service must use the same propagation format, and both services must be configured to send data to the same Honeycomb environment.</p>\n<h2 id="visualize-traces-locally">Visualize Traces Locally&nbsp;<a class="headline-hash" arialabel="Anchor" href="#visualize-traces-locally"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>Honeycomb’s OpenTelemetry Distribution for .NET can create a link to a trace visualization in the Honeycomb UI for local traces.\nLocal visualizations enables a faster feedback cycle when adding, modifying, or verifying instrumentation.</p>\n<p>Enable local visualizations through application settings or environment variables.</p>\n<div id="sampling-nav" class="code-toggle-nav prose">\n<a class="active" href="#">AppSettings</a>\n<a class="hidden" href="#">Environment Variable</a>\n</div>\n<div id="sampling-content" class="code-toggle-content prose">\n<div id="sampling-AppSettings" class="active">\n<p>In <code>appsettings.json</code>, set <code>EnableLocalVisualizations</code> to <code>true</code>.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>\n</span></span><span class="line"><span class="cl">  <span class="nt">"Honeycomb"</span><span class="p">:</span> <span class="p">{</span>\n</span></span><span class="line"><span class="cl">    <span class="nt">"EnableLocalVisualizations"</span><span class="p">:</span> <span class="kc">true</span>\n</span></span><span class="line"><span class="cl">  <span class="p">}</span>\n</span></span><span class="line"><span class="cl"><span class="p">}</span>\n</span></span></code></pre></div>\n</div>\n\n\n<div id="sampling-Environment Variable">\n<p>Set the <code>HONEYCOMB_ENABLE_LOCAL_VISUALIZATIONS</code> environment variable to <code>true</code>.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HONEYCOMB_ENABLE_LOCAL_VISUALIZATIONS</span><span class="o">=</span><span class="nb">true</span>\n</span></span></code></pre></div>\n</div>\n\n\n</div>\n\n<p>Then, run your application.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dotnet run\n</span></span></code></pre></div><p>The output displays the name of the root span and a link to Honeycomb that shows its trace.\nFor example:</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Trace for root-span-name\n</span></span><span class="line"><span class="cl">Honeycomb link: &lt;link to Honeycomb trace&gt;\n</span></span></code></pre></div><div class="details alert note">\n    <div class="details-summary alert-title">\n      <i class="icon info-circle fa-fw" aria-hidden="true"></i>Note\n    </div>\n    <div class="details-content">\n      <div class="alert-content">In production, disable local visualization as it creates additional overhead to create the link and print it to the console.</div>\n    </div>\n  </div>\n<h2 id="using-opentelemetry-without-the-honeycomb-distribution">Using OpenTelemetry Without the Honeycomb Distribution&nbsp;<a class="headline-hash" arialabel="Anchor" href="#using-opentelemetry-without-the-honeycomb-distribution"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h2>\n<p>The primary purpose of Honeycomb’s SDK Distribution for .NET is to streamline configuration and to instrument as quickly and easily as possible.\nUnder the hood, the Honeycomb SDK Distribution is using <a href="https://opentelemetry.io/docs/languages/net/">OpenTelemetry for .NET</a>, which means OpenTelemetry can be used with or without this Distribution.\nIt may be unnecessary for advanced users or those already instrumented with OpenTelemetry to use the the Honeycomb SDK Distribution for .NET.</p>\n<p>The Honeycomb SDK Distribution reads specific variables and translates them to variables understood by upstream OpenTelemetry.\nFor example, when using the distribution, the environment variable <code>HONEYCOMB_API_ENDPOINT</code> is converted to the OpenTelemetry variable <code>OTEL_EXPORTER_OTLP_ENDPOINT</code>.\nTherefore, to send data to Honeycomb using OpenTelemetry without the Distribution, a different configuration is necessary to match expected variables.</p>\n<p>When using OpenTelemetry for .NET, the following configuration properties are required:</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">OtlpExporterOptions property /<br> Environment Variable</th>\n<th style="text-align:left">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left"><code>Endpoint</code> <br><code>OTEL_EXPORTER_OTLP_ENDPOINT</code></td>\n<td style="text-align:left"><code>https://api.honeycomb.io</code> (US instance) <br><code>https://api.eu1.honeycomb.io</code> (EU instance)</td>\n</tr>\n<tr>\n<td style="text-align:left"><code>Headers</code> <br><code>OTEL_EXPORTER_OTLP_HEADERS</code></td>\n<td style="text-align:left"><code>x-honeycomb-team=HONEYCOMB_API_KEY</code></td>\n</tr>\n<tr>\n<td style="text-align:left"><code>ServiceName</code> <br><code>OTEL_SERVICE_NAME</code></td>\n<td style="text-align:left"><code>your-service-name</code></td>\n</tr>\n</tbody>\n</table>\n<p>The service name must be set in either the TracerProvider configuration code or as an environment variable.</p>\n<p>The code below configures a tracer provider that can export traces to Honeycomb.</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">builder</span> <span class="p">=&gt;</span> <span class="n">builder</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetResourceBuilder</span><span class="p">(</span><span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">().</span><span class="n">AddService</span><span class="p">(</span><span class="n">serviceName</span><span class="p">))</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddAspNetCoreInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHttpClientInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddOtlpExporter</span><span class="p">(</span><span class="n">option</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"https://api.honeycomb.io"</span><span class="p">);</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">//option.Endpoint = new Uri("https://api.eu1.honeycomb.io"); // EU instance</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Headers</span> <span class="p">=</span> <span class="s">$"x-honeycomb-team={honeycombApiKey}"</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}));</span>\n</span></span></code></pre></div><p>More details on configuration options can be found on GitHub at <a href="https://github.com/open-telemetry/opentelemetry-dotnet/blob/main/src/OpenTelemetry.Exporter.OpenTelemetryProtocol/README.md#options-properties">OpenTelemetry for .NET</a>.</p>\n<h3 id="sampling-without-the-honeycomb-distribution">Sampling Without the Honeycomb Distribution&nbsp;<a class="headline-hash" arialabel="Anchor" href="#sampling-without-the-honeycomb-distribution"><img class="full-logo" src="/icons/Link.svg" alt="external-link" width="16px" height="16px"></a> </h3>\n<p>You can configure the OpenTelemetry SDK to <a href="/manage-data-volume/sampling/">sample the data</a> it generates.\nHoneycomb <a href="/manage-data-volume/sampling/#how-honeycomb-handles-sampled-data">weights sampled data based on sample rate</a>, so you must set a resource attribute containing the sample rate.</p>\n<p>Use a <a href="https://opentelemetry.io//docs/specs/otel/trace/sdk/#traceidratiobased"><code>TraceIdRatioBased</code> sampler</a>, with a ratio expressed as <code>1/N</code>.\nThen, also create a resource attribute called <code>SampleRate</code> with the value of <code>N</code>.\nThis allows Honeycomb to reweigh scalar values, like counts, so that they are accurate even with sampled data.</p>\n<p>In the example below, our goal is to keep approximately half (1/2) of the data volume.\nThe resource attribute contains the denominator (2), while the OpenTelemetry sampler argument contains the decimal value (0.5).</p>\n<div class="highlight"><div class="copybutton">Copy</div><pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">((</span><span class="n">builder</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">builder</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetResourceBuilder</span><span class="p">(</span><span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddService</span><span class="p">(</span><span class="n">serviceName</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">// IMPORTANT: add a SampleRate of 2 as a resource attribute</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddAttributes</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">new</span> <span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;(</span><span class="s">"SampleRate"</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="p">})</span>\n</span></span><span class="line"><span class="cl">    <span class="p">)</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetSampler</span><span class="p">(</span><span class="k">new</spa',
          '<code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">AppContext</span><span class="p">.</span><span class="n">SetSwitch</span><span class="p">(</span><span class="s">"System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>\n</span></span></code>',
          '<code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">((</span><span class="n">builder</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">builder</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetResourceBuilder</span><span class="p">(</span><span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddService</span><span class="p">(</span><span class="n">serviceName</span><span class="p">)</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">// IMPORTANT: add a SampleRate of 2 as a resource attribute</span>\n</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">AddAttributes</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="k">new</span> <span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;(</span><span class="s">"SampleRate"</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span> <span class="p">})</span>\n</span></span><span class="line"><span class="cl">    <span class="p">)</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetSampler</span><span class="p">(</span><span class="k">new</span> <span class="n">TraceIdRatioBasedSampler</span><span class="p">(</span><span class="m">0.5</span><span class="p">))</span> <span class="c1">// sampler</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddAspNetCoreInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHttpClientInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddOtlpExporter</span><span class="p">(</span><span class="n">option</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"https://api.honeycomb.io"</span><span class="p">);</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">//option.Endpoint = new Uri("https://api.eu1.honeycomb.io"); // EU instance</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Headers</span> <span class="p">=</span> <span class="s">$"x-honeycomb-team={honeycombApiKey}"</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}));</span>\n</span></span></code>',
          '<code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">AddOpenTelemetry</span><span class="p">().</span><span class="n">WithTracing</span><span class="p">(</span><span class="n">builder</span> <span class="p">=&gt;</span> <span class="n">builder</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">SetResourceBuilder</span><span class="p">(</span><span class="n">ResourceBuilder</span><span class="p">.</span><span class="n">CreateDefault</span><span class="p">().</span><span class="n">AddService</span><span class="p">(</span><span class="n">serviceName</span><span class="p">))</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddAspNetCoreInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddHttpClientInstrumentation</span><span class="p">()</span>\n</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">AddOtlpExporter</span><span class="p">(</span><span class="n">option</span> <span class="p">=&gt;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">{</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Endpoint</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="s">"https://api.honeycomb.io/v1/traces"</span><span class="p">);</span> <span class="c1">// US instance</span>\n</span></span><span class="line"><span class="cl">        <span class="c1">//option.Endpoint = new Uri("https://api.eu1.honeycomb.io/v1/traces"); // EU instance</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Headers</span> <span class="p">=</span> <span class="s">$"x-honeycomb-team={honeycombApiKey}"</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">        <span class="n">option</span><span class="p">.</span><span class="n">Protocol</span> <span class="p">=</span> <span class="n">OtlpExportProtocol</span><span class="p">.</span><span class="n">HttpProtobuf</span><span class="p">;</span>\n</span></span><span class="line"><span class="cl">    <span class="p">}));</span>\n</span></span></code>',
          "",
          '\n    <span class="menu-item submenu-header" style="padding-left: 40px;font-weight: normal;">\n        <img class="sidebar_icon" src="/icons/caret-right.svg" alt="menu-caret">\n        <span>Traces with OpenTelemetry</span>\n        \n    </span>\n',
          '\n    <span class="menu-item submenu-header" style="padding-left: 20px;font-weight: 500;">\n        <img class="sidebar_icon" src="/icons/caret-right.svg" alt="menu-caret">\n        <span>Send Data to Honeycomb</span>\n        \n    </span>\n',
        ],
      },
      "element.type": { values: ["SPAN", "DIV", "PRE", "INPUT", "LABEL"] },
      event_type: { values: ["click"] },
      "http.path": {
        values: ["getting-data-in/opentelemetry/dotnet-distro"],
      },
      "http.url": {
        values: [
          "https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/",
        ],
      },
      "library.version": { values: ["0.32.4"] },
      target_element: { values: ["SPAN", "DIV", "PRE", "INPUT", "LABEL"] },
      target_xpath: {
        values: [
          "//html/body/div[6]/div[2]/div/div[5]/pre/code/span[7]/span/span[8]",
          "//html/body/div[6]/div[2]",
          "//html/body/div[6]/div[2]/div/div[31]/pre",
          "//html/body/div[6]/div[2]/div/div[29]/pre",
          "//html/body/div[6]/div[2]/div/div[30]/pre",
          '//*[@id="Send Data to Honeycomb"]',
          "//html/body/div[2]/div/nav/ul/li[3]/ul/li[3]/label",
          '//*[@id="Traces with OpenTelemetry"]',
          "//html/body/div[2]/div/nav/ul/li[3]/label",
        ],
      },
      "telemetry.instrumentation_library": { values: [true] },
      "element.input.value": { values: ["on"] },
    },
    CLS: {
      "trace.parent_id": {},
      "web_vital.cls.largestShiftTarget": { values: ["html>body.fs-unmask"] },
      "web_vital.delta": { min: 0, max: 0 },
      "web_vital.entries": {
        values: [
          '[{"name":"","entryType":"layout-shift","startTime":257.69999998807907,"duration":0,"value":7.496097944544473e-7,"hadRecentInput":false,"lastInputTime":0,"sources":[{"previousRect":{"x":889,"y":38,"width":78,"height":50,"top":38,"right":967,"bottom":88,"left":889},"currentRect":{"x":884,"y":38,"width":79,"height":51,"top":38,"right":963,"bottom":89,"left":884}}]},{"name":"","entryType":"layout-shift","startTime":434.8999999910593,"duration":0,"value":0.04875491480996068,"hadRecentInput":false,"lastInputTime":0,"sources":[{"previousRect":{"x":0,"y":0,"width":3815,"height":1907,"top":0,"right":3815,"bottom":1907,"left":0},"currentRect":{"x":0,"y":186,"width":3815,"height":1721,"top":186,"right":3815,"bottom":1907,"left":0}}]},{"name":"","entryType":"layout-shift","startTime":508.29999999701977,"duration":0,"value":0.0006480021695406811,"hadRecentInput":false,"lastInputTime":0,"sources":[{"previousRect":{"x":0,"y":208,"width":455,"height":678,"top":208,"right":455,"bottom":886,"left":0},"currentRect":{"x":0,"y":262,"width":455,"height":678,"top":262,"right":455,"bottom":940,"left":0}}]}]',
        ],
      },
      "web_vital.id": { values: ["v3-1708167661120-2494395881290"] },
      "web_vital.name": { values: ["CLS"] },
      "web_vital.navigationType": { values: ["navigate"] },
      "web_vital.rating": { values: ["needs-improvement", "good", "poor"] },
      "web_vital.value": { min: 0, max: 0.95 },
    },
    INP: {
      "trace.parent_id": {},
      "web_vital.delta": { min: 40, max: 40 },
      "web_vital.entries": {
        values: [
          '[{"name":"click","entryType":"event","startTime":517.5999999940395,"duration":40,"processingStart":518.5,"processingEnd":518.7999999970198,"cancelable":true}]',
        ],
      },
      "web_vital.id": { values: ["v3-1708167661090-9758293967257"] },
      "web_vital.inp.eventTarget": {
        values: [
          "#Traces with OpenTelemetry",
          "#whoa",
          "#yes",
          "#hank-the-cowboy",
          "#more-info",
        ],
      },
      "web_vital.name": { values: ["INP"] },
      "web_vital.navigationType": { values: ["navigate"] },
      "web_vital.rating": { values: ["good", "poor", "needs-improvement"] },
      "web_vital.value": { min: 40, max: 8200 },
    },
    "HTTP GET": {
      component: { values: ["fetch"] },
      "http.host": {
        values: ["cdn-cookieyes.com", "directory.cookieyes.com"],
      },
      "http.method": { values: ["GET"] },
      "http.response_content_length": { min: 0, max: 0 },
      "http.scheme": { values: ["https"] },
      "http.status_code": { min: 200, max: 200 },
      "http.status_text": { values: [""] },
      "http.url": {
        values: [
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/audit-table/FXIc8zrf.json",
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/translations/Gy5sp9HE.json",
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/config/25hIEfuV.json",
          "https://directory.cookieyes.com/api/v1/ip",
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/-ma-W3hR.json",
        ],
      },
      "http.user_agent": {
        values: [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        ],
      },
      "library.version": { values: ["0.40.0"] },
      "telemetry.instrumentation_library": { values: [true] },
      "http.path": { values: ["api/v1"] },
    },
    resourceFetch: {
      "http.path": {
        values: [
          "ads/ga-audiences",
          "rec/page",
          "j/collect",
          "rec/bundle/v2",
          "s/settings/o-1DWGP4-na1/v1/web",
          "s",
          "libs",
          "icons",
          "api/v1",
          "stylesheets",
          "js",
          "images",
          "gtag/js",
          "npm/@docsearch",
          "v2",
          "@webcomponents/webcomponentsjs@2.1.3",
          "@statuspage/status-widget/dist",
          "css",
        ],
      },
      "http.response_content_length": { min: 856, max: 43457 },
      "http.url": {
        values: [
          "https://www.google.com/ads/ga-audiences?t=sr&aip=1&_r=4&slf_rd=1&v=1&_v=j101&tid=UA-70290127-1&cid=490296666.1708001731&jid=251941353&_u=AACAAEAAAAAAACAAI~&z=33349253",
          "https://www.google.co.uk/ads/ga-audiences?t=sr&aip=1&_r=4&slf_rd=1&v=1&_v=j101&tid=UA-70290127-1&cid=490296666.1708001731&jid=251941353&_u=AACAAEAAAAAAACAAI~&z=33349253",
          "https://rs.fullstory.com/rec/page?ngsw-bypass=true",
          "https://api.company-target.com/api/v2/ip.json?referrer=https%3A%2F%2Fwww.google.com%2F&page=https%3A%2F%2Fdocs.honeycomb.io%2Fgetting-data-in%2Fopentelemetry%2Fdotnet-distro%2F&page_title=OpenTelemetry%20for%20.NET%20%7C%20Honeycomb",
          "https://id.rlcdn.com/464526.gif",
          "https://s.company-target.com/s/sync?exc=lr",
          "https://stats.g.doubleclick.net/j/collect?t=dc&aip=1&_r=3&v=1&_v=j101&tid=UA-70290127-1&cid=490296666.1708001731&jid=251941353&gjid=1675458911&_gid=1081937843.1708001732&_u=AACAAEAAAAAAACAAI~&z=541991833",
          "https://rs.fullstory.com/rec/bundle/v2?OrgId=o-1DWGP4-na1&UserId=71950262-5060-4d14-b707-54a560003497&SessionId=2af60748-5104-4935-9e88-4ac60d07c48b&PageId=5a45c8d0-0636-49d7-aafe-db1310b07dc5&Seq=16&ClientTime=1708167661267&PageStart=1708164470523&PrevBundleTime=1708166047809&DeltaT=1382398&ngsw-bypass=true",
          "https://edge.fullstory.com/s/settings/o-1DWGP4-na1/v1/web?ngsw-bypass=true",
          "https://www.google-analytics.com/j/collect?v=1&_v=j101&a=1556698095&t=pageview&_s=1&dl=https%3A%2F%2Fdocs.honeycomb.io%2Fgetting-data-in%2Fopentelemetry%2Fdotnet-distro%2F&dr=https%3A%2F%2Fwww.google.com%2F&ul=en-gb&de=UTF-8&dt=OpenTelemetry%20for%20.NET%20%7C%20Honeycomb&sd=24-bit&sr=2560x1440&vp=2543x1271&je=0&_u=AACAAEABAAAAACAAI~&jid=251941353&gjid=1675458911&cid=490296666.1708001731&tid=UA-70290127-1&_gid=1081937843.1708001732&_r=1&_slc=1&z=359973171",
          "https://edge.fullstory.com/s/fs.js",
          "https://tag.demandbase.com/ef5ec1431e384daf.min.js",
          "https://cdn.amplitude.com/libs/amplitude-7.1.0-min.gz.js",
          "https://www.google-analytics.com/analytics.js",
          "https://docs.honeycomb.io/icons/circleInfo.svg",
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/banner.js",
          "https://log.cookieyes.com/api/v1/log",
          "https://docs.honeycomb.io/stylesheets/print.30986040abb3f7421b46b188d7691c88c8d6aab0fd3a85e167a7a392e0522c3a.css",
          "https://docs.honeycomb.io/main.js",
          "https://docs.honeycomb.io/js/glossary.js",
          "https://docs.honeycomb.io/tracing.js",
          "https://docs.honeycomb.io/js/hny-tabs.js",
          "https://docs.honeycomb.io/images/smiley.svg",
          "https://www.googletagmanager.com/gtag/js?id=G-6GB1G2KSLD",
          "https://docs.honeycomb.io/images/smileyFrown.svg",
          "https://cdn.jsdelivr.net/npm/@docsearch/js@3",
          "https://docs.honeycomb.io/js/feedback.js",
          "https://docs.honeycomb.io/js/responsive-toc.js",
          "https://docs.honeycomb.io/js/init-nav.js",
          "https://docs.honeycomb.io/icons/Link.svg",
          "https://docs.honeycomb.io/icons/x.svg",
          "https://cdn.polyfill.io/v2/polyfill.min.js",
          "https://docs.honeycomb.io/icons/external-link.svg",
          "https://unpkg.com/@webcomponents/webcomponentsjs@2.1.3/webcomponents-bundle.js",
          "https://docs.honeycomb.io/icons/caret-right.svg",
          "https://unpkg.com/@statuspage/status-widget/dist/index.js",
          "https://docs.honeycomb.io/icons/menu.svg",
          "https://docs.honeycomb.io/images/2021-HC-Logo-RGB.svg",
          "https://docs.honeycomb.io/images/2021-HC-Logo-Black.svg",
          "https://cdn.jsdelivr.net/npm/@docsearch/css@3",
          "https://cdn-cookieyes.com/client_data/497224d8995aa8565cbc3037/script.js",
          "https://docs.honeycomb.io/stylesheets/main.8354040877532f15e1647c55db841eaf79f635e5cc8ead1231520df9813b9c8e.css",
          "https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Mono:400",
        ],
      },
      "library.version": { values: ["0.32.3"] },
      "telemetry.instrumentation_library": { values: [true] },
      "trace.parent_id": {},
      "http.response_content_length_uncompressed": { min: 103, max: 165636 },
    },
    GET: {
      "http.host": { values: ["edge.fullstory.com"] },
      "http.method": { values: ["GET"] },
      "http.path": { values: ["s/settings/o-1DWGP4-na1/v1/web"] },
      "http.response_content_length": { min: 0, max: 0 },
      "http.scheme": { values: ["https"] },
      "http.status_code": { min: 200, max: 200 },
      "http.status_text": { values: [""] },
      "http.url": {
        values: [
          "https://edge.fullstory.com/s/settings/o-1DWGP4-na1/v1/web?ngsw-bypass=true",
        ],
      },
      "http.user_agent": {
        values: [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        ],
      },
      "library.version": { values: ["0.40.0"] },
      "telemetry.instrumentation_library": { values: [true] },
    },
    FID: {
      "trace.parent_id": {},
      "web_vital.delta": { min: 0, max: 0 },
      "web_vital.entries": {
        values: [
          '[{"name":"click","entryType":"first-input","startTime":517.5999999940395,"duration":40,"processingStart":518.5,"processingEnd":518.7999999970198,"cancelable":true}]',
        ],
      },
      "web_vital.fid.eventTarget": { values: ["#Traces with OpenTelemetry"] },
      "web_vital.id": { values: ["v3-1708167661090-7235031620624"] },
      "web_vital.name": { values: ["FID"] },
      "web_vital.navigationType": { values: ["navigate"] },
      "web_vital.rating": { values: ["good", "needs-improvement", "poor"] },
      "web_vital.value": { min: 0, max: 3000 },
    },
    input: {
      "element.className": { values: ["submenu-toggle-checkbox"] },
      "element.id": {
        values: ["Traces with OpenTelemetry", "Send Data to Honeycomb"],
      },
      "element.innerHTML": { values: [""] },
      "element.input.value": { values: ["on"] },
      "element.type": { values: ["INPUT"] },
      event_type: { values: ["input"] },
      "http.path": {
        values: ["getting-data-in/opentelemetry/dotnet-distro"],
      },
      "http.url": {
        values: [
          "https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/",
        ],
      },
      "library.version": { values: ["0.32.4"] },
      target_element: { values: ["INPUT"] },
      target_xpath: {
        values: [
          '//*[@id="Traces with OpenTelemetry"]',
          '//*[@id="Send Data to Honeycomb"]',
        ],
      },
      "telemetry.instrumentation_library": { values: [true] },
    },
    LCP: {
      "trace.parent_id": {},
      "web_vital.delta": { min: 472, max: 472 },
      "web_vital.entries": {
        values: [
          '[{"name":"","entryType":"largest-contentful-paint","startTime":472.19999998807907,"duration":0,"size":54082,"renderTime":472.19999998807907,"loadTime":0,"firstAnimatedFrameTime":0,"id":"","url":""}]',
        ],
      },
      "web_vital.id": { values: ["v3-1708167661090-3007712767101"] },
      "web_vital.lcp.element": {
        values: [
          "html>body.fs-unmask>div.docs-outer-container>div.docs-inner-container>div.docs-content>p",
        ],
      },
      "web_vital.name": { values: ["LCP"] },
      "web_vital.navigationType": { values: ["navigate"] },
      "web_vital.rating": { values: ["good", "poor", "needs-improvement"] },
      "web_vital.value": { min: 0, max: 4472 },
    },
    "web-vitals": {},
    documentLoad: {
      "document.title": { values: ["OpenTelemetry for .NET | Honeycomb"] },
      "http.path": {
        values: ["getting-data-in/opentelemetry/dotnet-distro"],
      },
      "http.url": {
        values: [
          "https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/",
        ],
      },
      "http.user_agent": {
        values: [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
        ],
      },
      "library.version": { values: ["0.32.3"] },
      "telemetry.instrumentation_library": { values: [true] },
    },
    documentFetch: {
      "http.path": {
        values: ["getting-data-in/opentelemetry/dotnet-distro"],
      },
      "http.response_content_length": { min: 25, max: 26859 },
      "http.url": {
        values: [
          "https://docs.honeycomb.io/getting-data-in/opentelemetry/dotnet-distro/",
        ],
      },
      "library.version": { values: ["0.32.3"] },
      "telemetry.instrumentation_library": { values: [true] },
      "trace.parent_id": { generator: randomId },
    },
  },
};
